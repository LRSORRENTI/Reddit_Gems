Kind of confused with constructors and factory functions..
Here's what I got until now..

Both ways are done to create a "blueprint" for numerous objects
 that share some functionality..

The factory function returns a new object, also easier to
 encapsulate things by simply not returning them but by using 
 closure they can still be accessed from inside the function..

With constructors you need to use the "new" keyword in the object 
instantiation, behind the scenes the function creates an object called
 "this" and returns it with the code you wrote.

In the course I'm doing (The Odin Project), they advise using
 factory functions over constructors.. Also instead of using inheritance,
  to use composition.. Which for me is great, because out of all of these, 
  factory functions + composition is what I understood the most..

Constructors, "this" keyword, prototypes and all that still kind of confuse me..



I wrote this little code to try and see if I could do something 
with factory functions and compositions.. Did I do it right or could have it have been better?

https://jsfiddle.net/va35kyrd/

https://codesandbox.io/s/muddy-fast-nc2nfl?file=/src/index.js



The idea is that player1(p1) has power of flight,
 p2 has power of invisibility.. Both can attack and heal, 
 and then p3 is overpowered so he has both powers and more health and healing ability..

I feel like I messed up with p3, passing in the if
 statement in line 17 could get messy with lots of different players.. 
 If I set p3 health and healing when I create it, it still uses the default ones of 5 and 3 (line 14).



 =================================================================================


 The OOP chapters in the Odin Project are terrible, I do not recommend them. 
 They are parroting common misconceptions about classes and object composition. 
 Iâ€™ll try to write a more detailed answer and review of your code tomorrow (and 
 show an alternative way to do it with actual composition).

Edit:

Didn't find enough time to write a detailed explanation, 
but here's my take on the Player class: 
https://github.com/caderek/oop-in-modern-js/tree/main/examples/game

If you are still interested, let me know -
 so I will explain why I wrote it this way.

Here's my initial write-up that tries to clear 
some misconceptions about classes: https://github.com/caderek/oop-in-modern-js/blob/main/README.md


==================================================================================================



When going down the road of data and methods, in an OOP style, 
which you seem to be after here, you want to be clear on the point of the pattern.

There is state, the data contained within the object, 
and then there a methods, the functions that manipulate that state somehow.

Given what you have, I couldn't help fiddling with it a little. I ended up with this:

// these are the mutable parts of your Player
// the "state"
const playerState = (name, health, healingPotion) =>
    ({ name, health, healingPotion });

// your powers should take the object and work with that
const flight = (obj) => ({
    fly: () => console.log(`${obj.name()} is flying`)
});

const invisibility = (obj) => ({
    invisible: () => console.log(`where is ${obj.name()}?`)
});


const Player = (initialState, ...powers) => {
    let state = { ...initialState }; // make a copy, this is our mutable state

    // let's build our object, knowing what we know
    const methods = {
        name: () => state.name,
        dealDamage: () => state.health -= 1,
        health: () => state.health,
        heal: () => {
            if (state.healingPotion === 0) {
                console.log("No more potions left");
            } else {
                state.healingPotion--;
                state.health++;

                console.log(`
                ${state.name} restored health.
                ${state.healingPotion} healing potions left;
                Health: ${state.health};
                `);
            }
        },
        attack: opponent => {
            console.log(`${state.name} has attacked ${opponent.name()}`);
            opponent.dealDamage();
            if (opponent.health() <= 0) {
                console.log(`${opponent.name()} has died`);
            }
        },
        // added this one, I'm lazy
        show: () => console.log(`${state.name}: [${state.health} H, ${state.healingPotion} potions]`)
    };
    // now, add some powers
    // ok, this is a little tricky, but all we're doing is taking our starting methods
    // and tacking on each power
    return powers.reduce((obj, newPower) => ({...obj, ...(newPower(obj)) }), methods);
};

const p1 = Player(playerState("p1",5,3), flight);
const p2 = Player(playerState("p2",5,3), invisibility);
//creating a player that has both flight, invisibility + more health and healing
const p3 = Player(playerState("p3",999,999), flight, invisibility);

//-------------------------------------------------------------------//


p1.show(); p2.show();

p1.fly(); //p1 can fly
// p1.invisible() //p2 can't turn invisible
p2.invisible(); //p2 can turn invisible
p1.attack(p2);


p1.show(); p2.show(); p3.show();
Modern javascript handles class style OOP much better than it used it.
 You might consider going that route.

const createPower = (name, action) => ({name, action});

class Player {
    constructor(name, health, healingPotion, ...powers) {
        [this.name, this.health, this.healingPotion, this.powers] = [name, health, healingPotion, powers];
    }

    getName = () => this.name;
    getPowers = () => this.powers.map(x => x.name);
    usePower = name => this.powers.find(x => x.name === name).action(this);
    dealDamage = (n = 1) => this.health -= n;
    isAlive = () => this.health > 0;
    getHealth = () => this.health;

    show = () => console.log(`${this.name}: [${this.health} H, ${this.healingPotion} potions] [${this.getPowers()}]`);

    heal = () => {
        if (this.healingPotion === 0) {
            console.log("No more potions left");
        } else {
            this.healingPotion--;
            this.health++;
            this.show();
        }
    }

    attack = (opponent) => {
        console.log(`${this.name} has attacked ${opponent.getName()}`);
        opponent.dealDamage();
        if (!opponent.isAlive()) {
            console.log(`${opponent.getName()} has died`);
        }
    }
};

const flight = createPower("fly", x => console.log(`${x.getName()} is flying`));

const invisibility = createPower("invisible", x => console.log(`where is ${x.getName()}?`));

const p1 = new Player("p1", 5, 3, flight);
const p2 = new Player("p2", 5, 3, invisibility);
const p3 = new Player("p3", 999, 999, flight, invisibility);


p1.show(); p2.show();
p1.usePower("fly");
// p2.usePower("fly");
p1.attack(p2);


p1.show(); p2.show(); p3.show();
There are some subtle advantages to the class route. 
e.g. with the manual create object, all those methods are new objects. 
With a class, they are all shared


====================================================================================


here are a number of ways to skin the object cat in JS. Here's a quick demo:

const testPerson = (testName, person, p2) => {
    console.log(`--- Test: ${testName}`);
    person.hello();
    console.log("same methods", person.hello === p2.hello);
    console.log(person);
};

{
    class Person {
        constructor(name, age) {
            this.name = name;
            this.age = age;
        }
        hello() {
            console.log(`Hello, my name is ${this.name}`);
        }
    }

    testPerson("Modern JS class", new Person("Alice", 12), new Person("Bob", 102));
}

{
    // old school "class"
    function Person(name, age) {
        this.name = name;
        this.age = age;
    }
    Person.prototype.hello = function () {
        console.log(`Hello, my name is ${this.name}`);
    };
    testPerson("bc(before classes) JS class", new Person("Alice", 12), new Person("Bob", 102));
}

{
    // create custom object
    const createPerson = (name, age) => {
        return {
            name,
            age,
            // note, because of the guts of JS, the this here will work
            hello: function () { console.log(`Hello, my name is ${this.name}`); }
            // however, the same won't work with an arror declartion
            // hello: () => { console.log(`Hello, my name is ${this.name}`); }
        }
    };
    testPerson("anonymous JS object", createPerson("Alice", 12), createPerson("Bob", 102));
}

{
    // create custom object, but don't attach methods
    console.log(`--- Test: JS data and functions`);
    const createPerson = (name, age) => ({ name, age });
    const sayHello = ({ name }) => console.log(`Hello, my name is ${name}`);
    const person = createPerson("Alice", 12);
    sayHello(person);
    console.log("same methods", sayHello === sayHello);
    console.log(person);
}
Output:

--- Test: Modern JS class
Hello, my name is Alice
same methods true
Person { name: "Alice", age: 12 }
--- Test: bc(before classes) JS class
Hello, my name is Alice
same methods true
Person { name: "Alice", age: 12 }
--- Test: anonymous JS object
Hello, my name is Alice
same methods false
{ name: "Alice", age: 12, hello: [Function: hello] }
--- Test: JS data and functions
Hello, my name is Alice
same methods true
{ name: "Alice", age: 12 }
Pick your poison.

The .prototype thing is very old school. However, 
it's also the foundation upon which the modern sits. 
JS isn't "class based" but "prototype based." While this is
 clever it its own right, most OOP programmers were "class based" 
 even when JS first came out. This resulted in much confusion and kind
  of still does. Thus, class sugar was added.

The last version, data and functions, shows how to do things 
without method bindings. Keeping in mind the first three are 
really just ways for tightly coupling the last one.

===============================================================================

Kind of confused with constructors and factory functions..
Here's what I got until now..

Both ways are done to create a "blueprint" for numerous objects
 that share some functionality..

The factory function returns a new object, also easier to
 encapsulate things by simply not returning them but by using 
 closure they can still be accessed from inside the function..

With constructors you need to use the "new" keyword in the object 
instantiation, behind the scenes the function creates an object called
 "this" and returns it with the code you wrote.

In the course I'm doing (The Odin Project), they advise using
 factory functions over constructors.. Also instead of using inheritance,
  to use composition.. Which for me is great, because out of all of these, 
  factory functions + composition is what I understood the most..

Constructors, "this" keyword, prototypes and all that still kind of confuse me..



I wrote this little code to try and see if I could do something 
with factory functions and compositions.. Did I do it right or could have it have been better?

https://jsfiddle.net/va35kyrd/

https://codesandbox.io/s/muddy-fast-nc2nfl?file=/src/index.js



The idea is that player1(p1) has power of flight,
 p2 has power of invisibility.. Both can attack and heal, 
 and then p3 is overpowered so he has both powers and more health and healing ability..

I feel like I messed up with p3, passing in the if
 statement in line 17 could get messy with lots of different players.. 
 If I set p3 health and healing when I create it, it still uses the default ones of 5 and 3 (line 14).